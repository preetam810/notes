What is Kubernetes? What problems does it solve?

Kubernetes is a container orchestration technology used to orchestrate deployment of 100s to 1000s of containers in clustered environment.
When applications are packages into docker containers, to run then in production we need to solve problems like
- networking of multiple containers
- scaling of application when number of users increase and scale down when users decrease
- traffic should be load balanced within seconds at service level
- application should be highly available. Hardware failures should not bring application down

To enable these functionalities you need an underlying platform with a set of resources. 
This whole process of automatically deploying and managing containers is known as Container Orchestration.
All this is done with a set of declarative object configuraton file.


Nodes:
A node is a worker machine and this is were containers will be launched by kubernetes. 

Cluster:
To make your application highly available and to balance load, you need more than one node.
CLuster is a set of nodes grouped together.

Master:
Master is also a node configred as master and watches over other nodes in a cluster. Master is reponsible for orchestration of containers on nodes.


Components installed:
Master:
1. API server
2. etcd service
3. controllers 
4. schedulers

Worker Node:
1. kubelet service
2. container runtime


API Server: acts as the front-end. The users, management devices, Command line interfaces all talk to the API server to interact with the kubernetes
cluster.

etcd service: is key value store used to store all data used to manage a cluster. etcd stores all information about all nodes in the cluster. 

schedulers: The scheduler is responsible for distributing work or containers across multiple nodes.

controllers: Controllers are the brain behind orchestration. They are reponsible for taking action when nodes, containers, endpoint goes down.

container runtime: Underlying software that is used to run containers, Eg: Docker, rocket etc

kublet service: Agent that runs on each node in a cluster and is reponsible for making sure containers are running as expected.


kubectl: command line tool used to deploy and manage applications on a kubernetes cluster, to get cluster information, get the status of nodes in the cluster 
and many other things.


#kubectl run hello-minikube
#kubectl run nginx --image nginx
Used to deploy an application on the cluster

#kubectl cluster-info
Used to view information about the cluster

#kubectl get nodes
used to list all the nodes part of the cluster

#kubectl get pods

#kubectl get pods -o wide
show IP of the pod and the node on which the pod is deployed

#kubectl get all

#kubectl create -f pod-definition.yml

#kubectl replace -f replicaset-definition.yml

#kubectl delete pod myapp

#kubectl delete replicaset myapp-rc


Kubernetes Objects:
1. Pods
2. Services
3. Replica sets
4. Deployments

Pods:
The containers are encapsulated into a Kubernetes object known as PODs. A POD is a single instance of an application. A POD is the smallest
object, that you can create in kubernetes.
PODs usually have a one-to-one relationship with containers running your application. PODs can have multiple containers of diferent type
To scale UP you create new PODs and to scale down you delete PODs. You do not add additional containers to an existing POD to scale your application.
Each POD gets its own IP address.



Replication controllers and Replica sets: 
They are the brain behind kubernetes. They monitor kubernetes objects and act accordingly. Multiple 
Pods can be created to share load.
Difference between Replication conterllers and Replica sets: Replica sets contain selectors.


Deployments:
Used for rollout upgrade. Rollout is a process of gradually deploying or upgrading a container.
Container version can be upgraded or made to roll back.
Creation of deployment triggers rollout. New rollout creates new Deployment revision.
This enables us to roll back to previous version of deployment if necessary.

#kubectl create -f deployment-definition.yml
creates deployments, replicasets and Pods.

#kubectl get deployments

#kubectl describe deployment

#kubectl rollout status deployment/myapp-deployment
shows status of rollout

#kubectl rollout history deployment/myapp-deployment
shows revision and history of roll out

#kubectl apply -f deployment-definition.yml
A new rollout is triggered and a new revision of the deployment is created.

#kubectl rollout undo deployment/myapp-deployment
This will then destroy the PODs in the new replicaset and bring the older ones up in the old replicaset.






YAML in Kubernetes:

Required fields:
apiversion
kind
metadata
    name
    lables
spec




