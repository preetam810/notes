Git:

- Git stores data more like a stream of snapshots. Every time you commit, or save the state of your project, 
Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
- Other VCS store delta.

Why Git?
Biggest advantage of git is its branching capabilities. Unlike centralized VCS git branches are easy to make and merge
Hence good for agile
In SVN, each developer gets a working copy that points back to a single central repository. Git, however, is a distributed version control system. Instead of a working copy, each developer gets their own local repository, complete with a full history of commits.
Hence this makes Git fast(performance) and work can be done without network connection.
Most operations are local
New branches can be created and destroyed for expirementation 
Large community 






Config:
git config --global user.name "Preetam Bankhele"
git config --global user.email "preetam810@gmail.com"
git config --list


Setting are stored in .gitconfig in home directory


Basic Git Commands:
- clone, status, add, commit, init, push, pull, checkout, branch, log, diff, merge, remote, ls-files, checkout, fetch, stash

git clone https://github.com/preetam810/gittest.git
 
git status
o/p:
On branch master  << shows the current branch
Your branch is up to date with 'origin/master'. << shows branch is up to date with master and created a remote repository reference called "origin"

nothing to commit, working tree clean 


git add <file> : adds a file from working/untracked area to staging/tracked area

git commit -m "Modified Read me"
git commit -am "Modified Read me" << add and commit together

git commit --amend

git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit. << One commited change needs to be pushed to remote repo
  (use "git push" to publish your local commits)

nothing to commit, working tree clean << nothing to commit from staging area to local repo


git push origin master

git branch: shows the current branch


git init: initializes the current directory as new git working repository. Creates a .git folder

git ls-files : gives list of all files git is tracking in current dir.

git checkout <file> : discard changes done in working directory and restore to the last commited file

git reset HEAD <file> : to unstage file

git pull : Will pull down from a remote

git add -A : will add files and detect if files are renamed / deleted using shell command

git mv : rename a file. git will automatically stage the changes


___

https://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/
___

Git stages:
Local
- Working directory: unstracked files, git status
- Staging area: tracked files, git add 
- Commit : local commits, git commit -m

Remote
Files pushed to remote, git push remote master


git rm : delete tracked file

In Git branches are just lables or pointers.

git branch
git branch -a
git checkout <branch>
git diff master <new_branch>
git branch -d <branch> : delete local branch
git branch -d origin <branch> : delete remote branch
git merge master <branch>


git log
git log --oneline --graph --decorate
git log -- <file>
git log --follow -- <file> : git history showing renames for that file
git show <commit-id>

git config --global alias.hist "log --all --graph --decorate --oneline" : create alias "hist"

.gitignore : this file contains files and directories which should be ignored from commiting.

git diff : shows diff between working dir and statging area
git diff --<file>: hows diff between working dir and statging area only for specific file
git diff HEAD : shows diff between working dir and last commit 
git diff --staged HEAD: hows diff between staging area and last commit
git diff <commit-id> HEAD : shows diff between commit id and last commit
git diff HEAD HEAD^ : compares last and second last commits
git diff master origin/master: compare between two branches


Happy path merge:
Fast forward merge is possible when there are no changes made in master branch after new branch was made
git merge new_branch

To disable fast forward merge capability and preserve branch info and add commit message:
git merge new_branch --no-ff


Automatic merge commit:
assuming there are differet changes in new_branch and master
git merge new_branch -m "merging changes fron new_branch"


Merge conflicts:
Automatic merge will fail
git diff new_branch master
git merge new_branch master : merge will fail and will move to merging state. open conflicting file where 
changes will be marked up by git. Resolve the conflicts.


Rebasing:
This moves the entire feature branch to begin on the tip of the master branch, effectively incorporating all of the new commits in master.
Rebasing is also a kind of merge, but doesnt create a new merge log at the head.
The major benefit of rebasing is that you get a much cleaner project history.
rebasing also results in a perfectly linear project history
git rebase master
git rebase --abort : incase of conflict
git rebase --continue : after merging conflicts use this cmd
git rebase -i master : Interactive rebasing gives you the opportunity to alter commits as they are moved to the new branch. This is even more powerful than an automated rebase, since it offers complete control over the branchâ€™s commit history. 

git fetch : is a non destructive cmd which updates the references from remote repo to local repo

Difference between git pull and fetch:
git fetch really only downloads new data from a remote repository - but it doesn't integrate any of this new data into your working files.
git pull, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. This means that pull not only downloads new data; it also directly integrates it into your current working copy files. (merge conflicts can occur)

git pull --rebase origin master : pull the new changes from master and also does rebase 


Stashing:
git stash temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on.

git stash : Files in staging area (tracked files) are saved.
git stash -u : saves tracked and untraked files

git stash apply : puts back the saved changes
git stash list
git stash drop
git stash show stash@{1}
git stash apply stash@{1}
git stash clear

stashing in to a branch:
git stash branch new_branch


Tagging:

git tag myTag
git tag --list
git show myTag
git tag --delete myTag
git tag -a v-1.0 : includes tag message
git diff v-1.0 v-1.1









